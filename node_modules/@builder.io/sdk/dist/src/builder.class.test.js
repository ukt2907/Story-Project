"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var builder_class_1 = require("./builder.class");
describe('Builder', function () {
    test('trustedHosts', function () {
        expect(builder_class_1.Builder.isTrustedHost('localhost')).toBe(true);
        expect(builder_class_1.Builder.isTrustedHost('builder.io')).toBe(true);
        expect(builder_class_1.Builder.isTrustedHost('beta.builder.io')).toBe(true);
        expect(builder_class_1.Builder.isTrustedHost('qa.builder.io')).toBe(true);
        expect(builder_class_1.Builder.isTrustedHost('123-review-build.beta.builder.io')).toBe(true);
    });
    test('arbitrary builder.io subdomains', function () {
        expect(builder_class_1.Builder.isTrustedHost('cdn.builder.io')).toBe(false);
        expect(builder_class_1.Builder.isTrustedHost('foo.builder.io')).toBe(false);
        expect(builder_class_1.Builder.isTrustedHost('evildomainbeta.builder.io')).toBe(false);
    });
    test('add trusted host', function () {
        expect(builder_class_1.Builder.isTrustedHost('example.com')).toBe(false);
        builder_class_1.Builder.registerTrustedHost('example.com');
        expect(builder_class_1.Builder.isTrustedHost('example.com')).toBe(true);
    });
});
describe('serializeIncludingFunctions', function () {
    test('serializes functions in inputs', function () {
        var input = {
            name: 'TestComponent',
            inputs: [
                {
                    name: 'text',
                    type: 'string',
                    onChange: function (value) {
                        return value.toUpperCase();
                    },
                },
            ],
        };
        var result = builder_class_1.Builder['serializeIncludingFunctions'](input);
        expect(typeof result.inputs[0].onChange).toBe('string');
        expect(result.inputs[0].onChange).toContain('return value.toUpperCase()');
    });
    test('serializes arrow functions in inputs', function () {
        var input = {
            name: 'ArrowComponent',
            inputs: [
                {
                    name: 'number',
                    type: 'number',
                    onChange: function (value) { return value * 2; },
                },
            ],
        };
        var result = builder_class_1.Builder['serializeIncludingFunctions'](input);
        expect(typeof result.inputs[0].onChange).toBe('string');
        expect(result.inputs[0].onChange).toContain('value * 2');
    });
    test('does not modify non-function properties', function () {
        var input = {
            name: 'MixedComponent',
            inputs: [
                {
                    name: 'text',
                    type: 'string',
                    defaultValue: 'hello',
                },
            ],
        };
        var result = builder_class_1.Builder['serializeIncludingFunctions'](input);
        expect(result).toEqual(input);
    });
    test('handles multiple inputs with mixed properties', function () {
        var input = {
            name: 'ComplexComponent',
            inputs: [
                {
                    name: 'text',
                    type: 'string',
                    onChange: function (value) { return value.trim(); },
                },
                {
                    name: 'number',
                    type: 'number',
                    defaultValue: 42,
                },
                {
                    name: 'options',
                    type: 'string',
                    onChange: function (value) {
                        return value.map(function (v) { return v.toLowerCase(); });
                    },
                },
            ],
        };
        var result = builder_class_1.Builder['serializeIncludingFunctions'](input);
        expect(typeof result.inputs[0].onChange).toBe('string');
        expect(result.inputs[0].onChange).toContain('value.trim()');
        expect(result.inputs[1]).toEqual(input.inputs[1]);
        expect(typeof result.inputs[2].onChange).toBe('string');
        expect(result.inputs[2].onChange).toContain('v.toLowerCase()');
    });
});
describe('prepareComponentSpecToSend', function () {
    test('removes class property and serializes functions in inputs', function () {
        var _a, _b;
        var input = {
            name: 'TestComponent',
            class: /** @class */ (function () {
                function TestClass() {
                }
                return TestClass;
            }()),
            inputs: [
                {
                    name: 'text',
                    type: 'string',
                    onChange: function (value) {
                        return value.toUpperCase();
                    },
                },
            ],
        };
        var result = builder_class_1.Builder['prepareComponentSpecToSend'](input);
        expect(result.class).toBeUndefined();
        expect(typeof ((_a = result.inputs) === null || _a === void 0 ? void 0 : _a[0].onChange)).toBe('string');
        expect((_b = result.inputs) === null || _b === void 0 ? void 0 : _b[0].onChange).toContain('value.toUpperCase()');
    });
    test('preserves other properties', function () {
        var _a, _b, _c, _d, _e;
        var input = {
            name: 'ComplexComponent',
            class: /** @class */ (function () {
                function ComplexClass() {
                }
                return ComplexClass;
            }()),
            inputs: [
                {
                    name: 'text',
                    type: 'string',
                    defaultValue: 'hello',
                    onChange: function (value) { return value.trim(); },
                },
                {
                    name: 'number',
                    type: 'number',
                    defaultValue: 42,
                },
            ],
        };
        var result = builder_class_1.Builder['prepareComponentSpecToSend'](input);
        expect(result.class).toBeUndefined();
        expect(result.name).toBe('ComplexComponent');
        expect((_a = result.inputs) === null || _a === void 0 ? void 0 : _a.length).toBe(2);
        expect(typeof ((_b = result.inputs) === null || _b === void 0 ? void 0 : _b[0].onChange)).toBe('string');
        expect((_c = result.inputs) === null || _c === void 0 ? void 0 : _c[0].onChange).toContain('value.trim()');
        expect((_d = result.inputs) === null || _d === void 0 ? void 0 : _d[0].defaultValue).toBe('hello');
        expect((_e = result.inputs) === null || _e === void 0 ? void 0 : _e[1]).toEqual(input.inputs[1]);
    });
});
//# sourceMappingURL=builder.class.test.js.map